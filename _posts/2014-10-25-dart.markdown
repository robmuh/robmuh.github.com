---
layout: post
title: How Does Dart Fly at SkilStak?
subtitle: It Doesn't
---

At first glance Dart looked like a much friendlier way to teach full-stack
web apps &mdash; particularly to school-age kids &mdash; but ultimately
Dart distracts them from learning JavaScript and other established
languages that matter more.

Picking emerging technology to teach is tough. While any good
technologist must constantly assess how to invest their mindshare,
teachers face the added challenge of deciding when and how their students
should invest theirs.

This relatively [recent article about Dart
1.1](http://jaxenter.com/dart-can-now-write-better-javascript-than-you-107431.html)
crossed my path claiming JavaScript compiled
from Dart is actually faster than 'hand-written'
JavaScript I would create, which is currently not true. It
also notes that one of the big minds behind Google and Node's V8 engine, [Lars
Bak](http://www.infoworld.com/article/2620869/javascript/infoworld-interview--why-google-dart-beats-javascript.html),
leads the Dart team.

### Core Languages

Here are the programming languages we currently learn at
[SkilStak](http://skilstak.com):

* [Blockly](https://learn.code.org)
* [Python](https://www.python.org/)
* [JavaScript](http://phaser.io/)
* [Java](https://www.jetbrains.com/idea/)
* [GML](http://docs.yoyogames.com/)
* [C#](http://docs.unity3d.com/ScriptReference/)
* [Bash](http://www.amazon.com/The-Linux-Command-Line-Introduction/dp/1593273894)
* [C](https://www.libsdl.org/)

That's a lot to learn. I would rather students learn one of these
well-established and popular languages on our short list than learn Dart.
Even learning these secondary languages &mdash; that get a lot of use today &mdash;
would be better than Dart:

* Ruby
* Perl
* Lua
* Scala
* PHP
* Tcl
* Haskell
* Erlang
* C++

Even Visual Basic would be more relevant.

### But why?

Here are the reasons you won't be learning Dart at SkilStak, at least
not for now:

* Dart throws away prototypes, one of the coolest things about JavaScript
* Dart lacks adoption and support (including from the Mozilla Foundation)
* Node alternatives have more momentum
* Dart JS is [*not* faster](https://www.dartlang.org/performance/) than JavaScript
* Dart comes with an [Eclipse IDE](https://developer.android.com/sdk/installing/studio.html)
* Dart still uses [SVN (not GIT)](https://code.google.com/p/dart/wiki/GettingTheSource)
* Competitors TypeScript and CoffeeScript are JavaScript

But the biggest reasons of all ...

* JavaScript is still easier to learn than Dart, even simpler
* Dart has a ~butt-ugly,~ heavy, Java and C++ STL like syntax
* JavaScript's asynchronous, prototypal nature is a great contrast

It's important even new students to programming realize there is more
than one approach to creating solutions with code. We learn procedural and
traditional classes with Python, then expand into functional asynchronous
callbacks and prototypes with JavaScript. Teaching Dart does not expand
students view of the fundamental approaches to programming as much as
does combining:

* Python - procedural, object-oriented, mixable
* JavaScript - functional-ish, prototypal, asynchronous
* Java - object-oriented, single-inheritance
* C - procedural, low-level 

### JavaScript Does Have Warts

I won't pretend that it didn't take a long time to warm up to JavaScript
having experienced the non-modern version through the 90s. There is plenty
to hate on, but the biggest reason Dart puts forth for getting rid of
JavaScript is to have something for large scale web applications with the
fair claim that JavaScript's lack of any typing is a major problem in that
area.

I agree.

This is why a lot of Unity game developers, the serious ones anyway, blog
over and over again the problems of using UnityScript. (They can't bring
themselves to call it JavaScript.)

But the better question is, "Why are you making large scale web
applications like they are Java enterprise applications?"

### "Let's Make a Language", Says a Bunch of Java Developers

What I think is closer to the truth is that Dart was created to replace
Java and GWT, which several others have suggested. That is the real
motivation.  It sure would explain why it looks so much like Java and
has the same kind of typing and casting that Java and C++ have.

Dart caters to old, hierarchal, enterprise thinking as if Java
developers wanted Java for the web language and were willing to throw
out other existing standards to get it. Remember applets, servlets, and
beans? Or worse, remember VBScript? Be happy if you don't.

The irony is Dart still has many of Java's architectural warts such as
promoting classes over prototypes, which are notoriously incorrectly
inherited just like Java developers have been for years. Dart promises to
save developers from themselves by adding types, for example. Wanna save
the world? Protect us from crappy inheritance, in fact, *any* inheritance
and do things to promote flat composition instead. Think horizontal,
not vertical. To Dart's credit it does allow mixins to help with this.

### Use Object-Oriented Principles Higher

Dart may be relatively new, but a lot of it smells old. Here's a
discussion of the old premise Dart seems to be working from.

While at Nike and IBM I observed that the best large-scale applications
had 'great seams', a term I still use, 'mashups' is another way of saying
this, sort of. I wrote the communication protocol and data handlers for
one such application that collected data from 50,000 machines to manage
server compliance and more &mdash; in Perl &mdash; a wildly type-free
language.  I didn't like Perl's regular class model and made the Perl
[classes](http://github.com/robmuh/perl-classes) pragma module to
help. Still no types. Perl gets a bad rap and actually supports the
argument Dart creators make about what happens when you don't give
developers constraints. I'm proud to say my code did not fall into the
'write once, read never' spaghetti category. Still the critique of Perl
is valid and one reason Python continues to be preferred over Perl in
the large-application space including by me.

The components of the large application I created were largely created in
isolation from the other parts of the application. I knew my domain and
needed only an overview of the rest to be productive. No developer had to
know anything about the rest of the application to be productive. Small
teams and even individual developers were free to use their own methods,
languages and workflows that satisfied their requirements and preferences
with some overriding guidelines for the entire project. Our different
teams chose mostly dynamic, untyped languages that are often accused of
not scaling well: Perl, Ruby, JavaScript, even VB. No bloated Eclipse. Our
code was almost always Vim and Notepad++. Why? Because they are fast
to develop in, much faster than Java or C++. This also meant we could
instantly examine and debug stuff in the field. Our business model did not
require proprietary perturbing everything. This real-world encapsulation
enjoyed the same virtues behind traditional Object-Oriented programming.

These huge applications are composed of many smaller, highly testable,
apps with well defined APIs that communicate almost always over HTTP
with JSON these days. Sometimes they use simple file system directories
to communicate between each other very much like an assembly line in the
real world. This focus on moving data objects around is the key. It's
about the data, not about the objects.

In a sense all the smaller apps that comprise such a larger system
serve as instances of finite, singleton classes from the traditional
object-oriented programming paradigm. It follows then that the languages
that work best with this model are fast to develop in, highly efficient,
asynchronous, event-based, and &mdash; most of all &mdash; great at
communicating very fast over HTTP. This is why JavaScript and Node are
so significant. You don't even need a web server to tie together the
pieces over HTTP.

Java, C++, C# and the rest of the big application languages run on the
architectural assumption that the entire application will be contained
in a final, single, runnable app, or at the very least, a collection
of compatible libraries, beans, jars, or whatever. Sharing is done not
through web APIs and communication, but by programming class interfaces,
class APIs, or shared memory. If you want to change anything with this
application you have to change the whole thing, a dependency, or inherited
class, which has *proven* tragically brittle for far too many enterprise
applications. Let's face it, most enterprise apps are not high-performance
games, one usecase where big application languages like Java, C#, C++
are de rigueur and for good reason (just don't do UnityScript, lol).

Just before leaving IBM I was assigned the responsible to identify
horrid memory leaks and other issues in a 647,000 C code base for
one such 'enterprise' application that ran on literally hundreds of
thousands of IBM's biggest customer machines. This application was a
brittle, almost-untestable, horrid mess and ultimately one of the main
reasons I left IBM (and swore to never return to these types of large,
architecturally-retarded enterprises). Someone actually thought that
this huge application needed to be in C. It didn't.

Dart seems to hang on to the old thinking that scalable enterprise apps
have to be done the way Java and the like do it. Throwing out prototypes
in favor of a better way to define classes smells like old enterprise
notions behind evil inheritance trees. Dart does add mixins to help
address the inheritance issue I presume.

Mostly Dart's main goal to replace JavaScript with an entire language
more suitable for large-scale applications is based on an old and inadequate
architectural model. If you keep your apps small with clean seams and
stuff spread horizontally instead vertically (as enterprises tend to do)
then JavaScript and the other dynamic languages are not only fine they
are preferred to Dart.

### JavaScript Does Scale

The claim that JavaScript "doesn't scale" can be said of Python, Perl,
Ruby and others with minor exception. I have seen for a fact any of these
languages scale remarkably well when used to create smaller apps as part
of a larger system. More importantly the dynamic languages are more easily
fixed and altered when problems do come up as they do for any system.

In fact, if you architect this correctly you can rewrite entire app
components of the larger system to meet the changing needs of what
that specific component is designed to accomplish without redoing the
entire system. Talk about separation of concerns. This is the very goal
behind object-oriented thinking. You are still applying fundamental
object-oriented concepts just at a higher level than any single app
comprising that system.

### Node and NPM Do Have Problems

Another reason I gave Dart a chance is because of the freak-show that
Node and NPM have become being suffocated by the mob piling on top of
it so fast they can't breath enough to finish building it. Node and NPM
have problems, [big problems](https://github.com/joyent/node/issues/6960)
that a lot of people wanting to look cool might overlook lest they face
angry-skinny-jeans retaliation. Here's a good summary:

> Just finished reading this thread, so the conclusion is node's module
> system sucks but it won't be fixed? Lame.

This, and the complexity of setting up a Node development environment,
(which is why I created [kwand.io](http://kwand.io)), had me in a place to
at least consider the alternatives.

Maybe I'm just too old but often the whole Node effort seems to be driven
by a bunch of geniuses that have never done enterprise-scale development.
I mean, the whole `node_modules` fiasco not working on Windows is one thing
but then claiming it is not Node's fault, "It's Windows fault" is, well,
something someone without enterprise experience would say.

Node itself is really just riding on the coat-tails of the true-brilliance
behind the V8 engine optimizations and the main genius behind that is
now leading the Dart team. I still feel V8 will get all the attention it
needs because the whole world seems focused on optimizing the web and that
means optimizing V8. The momentum is staggering. Just because Lars is
leading Dart now does not mean that V8 will suffer in the least.
