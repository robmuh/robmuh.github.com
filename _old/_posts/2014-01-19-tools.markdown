---
layout: post
title: Professional Tools
subtitle: The best programming, sysadmin, and developer tools &mdash; ever
---

Coding is a craft, an art. Artists pick tools that bring their art to life
as quickly and powerfully as they can. Often artists settle on one, best tool
for the job. Here is a list of the best tools to help you get started
right.

### TL;DR

**Hardware:**

Don't stick with just one vendor. Mix it up.

* Laptop (Mac if you can or Linux)
* Tower (Windows 7)
* SmartPhone
* Pad

**Software:**

There will be other stuff depending on your industry (Adobe, etc.).

* bash
* vim
* ssh
* screen
* git
* irc
* Chrome
* Eclipse (if necessary)
* Jekyll (or equiv)
* GreenShot (or equiv)

**Services:**

So very many, but these are essential.

* Gmail.com
* Twitter.com
* GitHub.com
* Google
* NewRelic
* YouTube.com
* Blip.tv
* Vimeo.com
* Pinboard.in
* DropBox.com
* Amazon.com
* InstaPaper.com
* Joker.com (or equiv)

**Languages:**

For hacking your personal toolset, not other main development.

* Perl
* Bourne Shell

I'm not just listing my preferred tool set and supporting it. And although
my conclusions are anecdotal, they are pretty consistent with what you
would find out on your own if you searched or surveyed developers on the
Internet, which is something I hope to better do someday through
[skilstak.io][].

**Bozo Alert:** Bozos decide first then research later to support their
conclusions. Gurus learn and research, even if informally, and then
decide.

### How to Decide?

My criteria are simple:

* Which tools (when mastered) makes a developer the fastest?
* Which tools are the most ubiquitous?
* Which tools take the least time to install if necessary?
* Which tools tend to produce the highest quality outputs?

Notice I did not include how long it takes to master the tool. Doctors
don't pick the procedures that are the fastest to learn, they pick the
ones that are ultimately the most effective and efficient once they
have mastered them. Developers should be no different.

**Bozo Alert:** Bozos don't learn something new unless forced. Gurus
don't *stop* learning and trying new things unless forced.

### 'dems fightin' words

Before I get into this. I realize this post will infuriate some,
usually [bozos][]. If you aren't already using these tools:

* You are a muggle.<br>(Isn't there a sports game on somewhere?)
* You are a [bozo][bozos].<br>(Shouldn't you go check your StackExchange rep again?)
* You are a master.<br>(Nice to have you, but isn't that your hot pocket burning?)
* You are a noob.<br>(Welcome! Hopefully I can help. Read on.)

I hope this post helps you prioritize the mountain of things you have
to learn to really become a great coder.

### Phone and Texts: SmartPhone

I don't really have to explain this one do I? If you don't have one
forget about any client or potential employer ever taking you
seriously as a technologist.

### Laptop

Even if you do a lot of desktop lab work, a laptop allows you to code
anywhere, anytime--including in bed with your understanding wife
sometimes. Unless you are doing high-end game and 3D modeling you
don't need more than a $500 laptop--especially since you'll spend most
of your best coding hours staring at terminals running `vim` and web
pages. Make sure you get RAM though because virtual machines eat it up fast.

A lot of developers are getting Macs these days not just because they are
crazy cool (despite the price) but because you can develop for Windows on
a Mac, but you can't develop for Mac--including iOS--on Windows (as of
this writing). This also works out because, if you have the money, you
can get an amped up Windows machine (that doubles as a sweet gaming
rig) for your desktop.

### Desktop

Most established developers that I have met over the years have at
least two computers, which means usually they have a powerful desktop
system *and* a laptop. Usually they will get a static IP from their
ISP and connect in with ssh. Even developers that spend most of their
days in the cloud have a desktop to allow really powerful coding
sessions with multiple screens even with their laptop beside them.

This is particularly important if you are developing apps, games or
enterprise software that requires a lot of horsepower or complex
virtual lab setups.

### Pad

You need a touch device. It seems optional but even all you use it for
is as a reader it is worth it. This is the primary reason I list it.
You should be constantly reading and keeping up on new stuff and being
stuck in front of a Desktop or even a laptop can be just annoying
enough to keep you from reading. This is particularly powerful when
combined with Kindle and InstaPaper (which I discuss later).

Here are some more reasons:

* Enables point-of-sale credit card transactions with clients
* Makes presentations easier
* Portable enough to take with you to read
* Use it to plug your music or video into TV while you code on laptop
* You'll likely be developing for it

Get the one you will be developing for the most, if that is your thing.
Since Kindle runs on everything I would suggest an iPad or Android.

### Browser: Chrome

There is no more better graphic web browser than Chrome. Webkit and the JavaScript V8
are the dominate web components. Everything is benchmarked against
them. Chrome's developer console and other tools also make it far
superiour even to Firefox.

On the practical side, Chrome wonderfully organizes and psychronizes
your bookmarks, search items and more. Your customizations are
instantly anywhere you find [Chrome][].

### Cloud

Modern development is in the Cloud Modern developers therefore have two
things above all:

1. A laptop
1. A cloud account (or ten)

Most of the work you do will will not be on the actual
computer you use. You will either log into servers using `ssh` or you
will actually setup servers in the cloud for your customers and
clients.

[Amazon][], [Rackspace][], and [Digital Ocean][] are making
it easy and cost effective to bring up server images that more and
more developers are just using them for developing these types of apps
and turning them up when things go into production.

I used to recommend getting VMware since it allows setting up a lab in
your location all on a single computer. I suppose this is still an
option if you have a powerful desktop. But the contract/project-based
work of most developers makes portability usually more valuable. This
is why the Macbook Air or light Ubuntu equivalent a *huge* item for
developers.

### Connect: Secure Shell (SSH)

This remote connection method is now the gold standard. Most
enterprises and clients require it for logging into their systems.
GitHub allows you to checkout your source repositories using only SSH
keys, which is faster than over https (and less buggy) since you don't
need to enter your password every time. This allows you to do things
like combine everything you need to do to [git save][] something into a single
command.

And you really don't need [Putty][] anymore. Use [git-bash][], which
you already installed if you are on Windows. It comes with ssh and your
configurations can be saved and consistent across all your systems. I
admit I chuckle a bit inside everytime I come across someone still using
Putty. Save yourself one more install and skip it.

Never use `telnet`. It's insecure and quirky.

### Navigate: Bash (in vi-mode)

The day has finally come: one command shell to rule them all.

[Bash][] is the most powerful command shell on the planet, period. Now
that it runs on Mac, thanks to Steve Jobs and [NeXT integration][], and
Windows, thanks to [git-scm.org][], there is really no reason to ever use
another interactive command shell again. You will code scripting
languages for others for sure (i.e. Bourne, bat, etc.) but you will
never need another shell to do your coding in.

Bash is most powerful with a really customized and powerful [bashrc][]
file and some custom bash command completions for your own custom
functions as well as ones you will use all the time like `ssh`.

The lackluster `cmd` (conceived, developed and used by bozos) can die the
death it has always deserved. There is no excuse to use `cmd`, ever. Just
stop using it. Small kittens are dying someplace every time you do.

One of the best parts of Bash is vi-mode navigation through your command
history. Set it with `set -o vi`. command history.

### Compose: vi (vim), screen

The `vi` UNIX editor has long been the tool of choice for UNIX
professionals be they coders or sys admins or both. This editor is
literally on every UNIX or Linux machine in existence and has been since
the 70s. No other editor can claim that, period. It was developed by
geniuses at a time when Bill Gates was still in diapers. In other
words, these guys had no mouse to navigate, so they came up with the most
efficient way ever conceived to navigate with a keyboard *only*.

When the next generation [vim][] upgrade came the funcationality as a tool
blew well past 9000. Vim 7.4 enables beautiful editing in a way that no
other editor can touch. Masters tend to have a common set of
customizations mixed with their own through `.vimrc` and other
[vimfiles][].

Vim, like so many things in the development world, takes months to become
proficient with but it is practically a requirement in this field.

Note: If you absolutely positively have to have another editor besides
vim, consider [sublime][] or [writemonkey][] for just pure writing without
screen distraction (for which I would pay $100 for a pure vim mode).

### Terminals: screen

This is another classic old tool that has fallen into the arcane arts
but remains wildly amazing for fast development.

[Screen][] was developed before Windows to allow multiple sessions, or
screens, in a single terminal window. I always chuckle a bit when
I read blogs about people using multiple tabs in their terminal
software when screen has been there all along, and has much more
powerful cut and paste operations between screens.

Not only that, screen sessions do NOT die even if you disconnect. This
is an absolute must when doing highly sensitive work remotely where
a crash or suspend from a broken Internet connection could be
catestrophic. Yes you can `nohup` the work you are doing, but when you
log back in remotely all your screens are there waiting for you to
reattach. This is simply indispensable. Take the time to learn it.
Soon the keyboard commands will merge into your muscle memory with the
rest of your bask command line and VIM skills.

### Meet: Twitter, Hootsuite

Every job I have had since Twitter came out has been directly or
indirectly because of contacts and information I gleaned from Twitter.

Facebook is to keep connected with those you've known. Twitter is for
meeting who you want to know. The best technologists make sure to keep up
on emerging trends and people, to build their [PLN][] as it's come to be
known. That is what [Twitter][] is *really* about. Not Kone West's horrid
videos and cat juggling.

To make the most of Twitter you should get proficient with a tool like
[Hootsuite][], which let's you monitor a Matrix-like stream of people,
terms, and services from one screen.

If you have to pick one thing for a business card these days people
put only their Twitter handle. Same with advertisers. Twitter is *the*
way to reach out. Use it.

### Team: IRC

If you need a fast answer to a question you've already researched from
experts your best tool is IRC.

IRC, or [Internet Relay Chat][], is something of a rite of passage. Like
VI, but not as old, IRC has been used by the best hackers in the world
since the beginning of the Internet. It is the first, and some would
say best, chat room. IRC is like Twitter in that you can follow
streams of information about people or topics, but differs in the
number of people and ease of asking a question immediately.

I use [Xchat][], but there are tons of different IRC clients. This doesn't
matter so much as the rooms and servers you pick to connect to. Find
your topic of interest and Google the servers and rooms to add to your
IRC client.

You'll want to lock down a regular nick by authenticating it.

IRC is also perfect for small teams to open their own room and just
hang out in there. People come and go as they are around. Gives
a watercooler feel when coding in your dungeon.

**WARNING:** Do NOT jump into an IRC room and violate the rules of the
room or do stupid things like asking to ask a question instead of just
asking a question. The biggest strength of IRC, the immediate
responsiveness and volume of people, is also it's greatest weakness.

### Email: Gmail

My impression as I read a lot of Silicon Valley developer blogs and
tweets is that Google just ain't as cool to them as the rest of the
world. This may be, but Gmail is still a defacto standard email
provider for many reasons:

* Multiple emails in one by moving periods around (rob.muh, r.obmuh)
* Multiple accounts link seamlessly
* Hangouts for voice discussions, video chats, and desktop sharing
* Easily forward branded email to gmail (like rob@skilstak.com)

There simply isn't a better email provider for this stuff. Unless you
have very specific security concerns about Google potentially reading
anything you send or receive it really is the way to go.

### Save: Git

Linux uses [Git][] to manage and save all its source code. In fact,
the entire [CPAN][] library is migrating to it as well. Git wins over
every other source control management system because *every* clone of
a `git` repository is effectively identical. This is radically
different than ever source management system up to now and git has
a wide and commanding lead over `hg` and all the other variants.

Once you have ssh setup for your Git repositories like GitHub you can
combine several git commands into one [git save][] type of command.

### Contribute: GitHub

[GitHub][] is largely the reason git has such a commanding lead over
`hg`. This 'social development' approach of GitHub has caught on like
wildfire and reached epic proportions. [BackPAN][] is migrating to it;
[Adobe PhoneGap][] is tightly integrated with it; [Node.js][] has tied
its package manager [npm][] directly to it. GitHub was good enough for
Linus himself to go with and everything since has been a snowball.

But it isn't just source management. Anyone can have a web site for
free on GitHub as well using [GitHub Pages][]. This developer-centric
web site and blogging system using [Jekyll][] has brought
full control static web site development into the hands of anyone for free.

### Blogging: Jekyll

[Jekyll][] is a static blogging engine made for developers who don't want
to leave VIM and the command line unless they have to.

1. Write
1. [Show][]
1. [Save][git save]

And I'm done. No need to even open a browser unless I want to read it.
There is simply no faster way to blog.

All the blog posts are in [markdown][], which has become the standard
light-weight text markup for about everything these days including entire
[books][] and [StackExchange][]. This format reads and prints well all by
itself and allows full HTML inclusion as well.


While Jekyll is not the only static blogging engine around it is the
main engine used for [GitHub Pages][] and has a long lead over any
other static blogging offerings. This is a hot space right now and
will likely change over time, but Jekyll has the momentum and support
to be an essential tool to understand.

[Jekyll][] is so powerful and efficient that the [Obama campaign][]
included it in their toolset as well.

A lot of developers don't take the time to blog, which I think is
really too bad. Technocrats horde knowledge thinking it will give them
power and authority. The opposite is actually true. The more you blog
about topics you have clearly researched and discovered the more your
influence grows. Plus putting concepts to type solidifies your
understanding of them.

Blogging is the modern form of [old world correspondence][] done between
people of similar interest and aptitude.

### Screen Capture: GreenShot

You'll need screen shots a lot as a developer, to communicate with
customers, show problems, create help documentation, design
prototypes, and blog.

* Fast
* Flexible
* Compatible
* Free

[GreenShot][] seems the best option on all of these. It allows the capture
of an entire window, even if not on the page, which is key to me. It
also changes the default `Print Screen` key to do region captures,
which I prefer. Yes you can customize to your hearts content, but the
default functionality is very good making it a quick application to
download and install for anyone.

### Reader: InstaPaper, Kindle

[InstaPaper][] is something of an unknown tool but I have noticed the
most elite use it to constantly keep up on those web site posts that
are just TL;RL (read later). You want to read them but don't have time
now. But you will later. That's the point of InstaPaper. You click
*Read Later* on the page or from your device and now you have
something to read over coffee in the morning, while waiting in lines,
even in the john (but you can expect funny looks when you take your
device in the bathroom with you).

Kindle books is a given. They are cheaper and lighter on your device
than in tree form, but most importantly they are **searchable**.
Sometimes having a good O'Reilly book is nostalgically nice, but
a really bad idea given how fast that material will become out of
date.

### Research: Google

Had to list it. Save yourself some money and trees and just Google
everything. Learn to setup automated searches that will send you email
when new information is available for the keywords you list. This is
a good way to assess your brand and self as well.

You can even set up [Lynx][] on the command line if you want to do
google searches. This text only browser cuts out on a lot of the fat
and can be cut and paste from using `screen` directly into your VIM
sessions without ever touching a mouse.

Don't even thing about using Bing or Yahoo. The search results aren't
even accurate.

### Bookmarking: Pinboard - Social Bookmarking for Introverts

[Pinboard][] is fast --- like lightning fast. There is *nothing* between me
and saving my bookmark except my typing speed and decision on what I
personally want for tags. I don't have to slow down to deal with menus and
creating new folders or the right folder like you do with Google. And
Delicious is just sooooo slow. I really don't care about tags others have
used or looking through what the most tagged sites are. If I want that
I'll look it up on Delicious or just Google it. Besides, frequently the
stuff I find that is work bookmarking isn't mainstream enough to even
register on the Delicious radar. Plus the guy who runs it is just cool. I
prefer supporting him.

### Sharing: Google+

[Google+][] has taken over Skype in my opinion as the best 'fat' collaboration
tool, when you need voice, video and more. You can not only voice and
video chat, but you can make demos and presentations--even remote desktop.

Count on becoming the extended family and friends IT guy. Google+ is
worth it just to fix their muggle IT problems with and for them in the
least amount of time so you can go back to creating cool stuff.

### Video: Blip.tv, Youtube.com, Vimeo.com

When dealing with video I usually have two general audiences based on
public and premium video content.

[YouTube][] is another no brainer. Chances are you already use this.
YouTube is tied to your Google account and has massive public
visibility, which is why [KhanAcademy][] and others choose it.

[Blip.tv][], however, you may not have heard about. Use Blip and
YouTube (and every other video service in existence just about) to
push your public videos to the most people. I [reexamined][] Blip recently
to check its relevance and it still seems there to me --- especially
for this upload once, push everywhere public content.

[Vimeo][] is mostly for your premium content but can also take the
public content you push with Blip. It is also the only service (as of
this writing) that let's you lock down streaming to a specific domain
name or pay-per-view types of access and subscription handling. This
is why indy film makers, machinimatagraphers, and other high-brow
video types use it. Don't mess around with their terms, they are
pretty draconian about enforcing them (from what I've read). There are
other [reasons][] to use it as well.

You may never make a video of your own, but chances are someone else
has and you'll need an account to remember all the videos you collect
covering development and other topics you care about.

### Cloud and More: Amazon

Amazon has so many benefits it too is a no brainer:

* Best no-questions-asked return policy
* Reviews of everything
* Videos purchased are available
* You keep any music purchased

And of course ...

* AWS Cloud Services

[Amazon AWS][] AWS has a far lead in the cloud hosting world, chances are you'll
have to know it at some point even if you do pick another cloud
provider as your primary ([Digital Ocean][], [Rackspace][], [Linode][], etc.)

### DropBox

[DropBox][] is just the easiest way to transfer files between computers. You
can selectively make items public. While you can have private GitHub
repos for a slight additional cost, DropBox gives you this
functionality for free and is available anytime to any computer that
has an Internet connection.

You can also collaboratively share files here with muggles that are
unfamiliar with GitHub.

### Analytics: Google, NewRelic

Google and NewRelic give you stats about your sites and apps. They
are pretty much standard on everything these days. Most all modern
sites contain the 'agent' code to tie them in.

### Scripting: Perl, Bourne Shell

These days at least Perl 5.8.8 is on no installation required. And
when it isn't Bourne is.

I'm not talking about for developing apps. I'm talking about the tools you
hack together quickly in your `bin` dir to help you develop apps. These
are the bits of code you and others make to make your coding life bliss.
Perl + Bourne means you have a toolset that is ubiquitous and ready to
install on anything in this cloud-centric time.

If any one of those little hacked tools become big enough to evolve into
an application, then, yeah, sure, port it to something else.

**But Bourne is old and doesn't do what I want?**

Then use Perl.

**What about Korn shell?**

I have yet to encounter a UNIX or Linux machine that has Korn shell
that doesn't also have Perl. It just isn't worth it to blow Bourne
shell universal compatibility. If you are ready to do that, then do it
with Perl instead, which scales much better than Korn and saves you
from nasty inconsistencies in `n|g|awk` and `sed` between Unix versions.
I've been bit by that more times than I can remember.

**Perl isn't secure**

Bullshit. Prove it.

**What about Ruby, Python, Node or any other scripting lang?**

What about them? They are fantastic scripting languages ***that you still
have to install.*** I'm just too lazy and in today's cloud development
world so are a lot of other developers.


Try as they might, there is simply no more ubiquitous scripting language
with the power of Perl than Perl.

**Perl is write-once, read-never code**

Programmers that complain about not being able to read and modify Perl
reveal more about themselves than any problem with Perl. Usually some bozo
wrote spaghetti and another isn't smart enough to decipher it. It has
never been about Perl itself. And yes you can write spaghetti in Python,
Java, PHP, and JavaScript.


**Perl sucks at object-oriented programming**

Ummmm ... duh. And why are you using OO for your utility hacks anyway? Not
*nearly* lazy enough. If you need more OO use something else like Ruby,
Python, [Moose][] or the older [classes][] pragma. Why are you even
doing OO? Are you absolutely sure a functional or procedural paradigm
won't work for you? OO has major failings for the wrong application.

### IDE: Eclipse

An Integrated Development Environment is some messed up term invented
by someone probably paid way too much. This is the thing you make
other things with. That is, if those things are bloated crap, usually.

IDEs where made for mouse-clicking bozos. But only the very lucky will
escape having to ever use one. For some reason senior bozo
decision-makers are convinced in some companies that these expensive
bloated pieces of shit help our efficiency as developers, or maybe it
is because they can hire more cheap bozos mouse-clickers to do the
work they don't want to pay one *good* developer to do.

If you have to use one, use Eclipse and then you can modify all the
files from your Bash shell and VIM and just click update from the GUI
when you are done. Eclipse also has a pretty good command-line
interface as well so you can stay away from fat-GUI clicking.

There is one big exception: when building stuff that contains a lot of
clicking specifically targeted at mouse-clicking, touchy-pad smearing
muggles (who pay us, I might add). The Android SDK is a good example
of this.

### Domains: Joker?

I have used joker.com most of my career because it was cheaper than
anything else for a very long time. Just this month I am starting to
see other providers who are cheaper and want to check them out. Until
then Joker has proved over and over to be the cheapest with the
essential domains services.


[Adobe PhoneGap]: https://build.phonegap.com/
[Amazon]: http://amazon.com
[Amazon AWS]: http://aws.amazon.com/
[BackPAN]: http://backpan.perl.org/
[Bash]: http://superuser.com/questions/61727/why-is-bash-everywhere-in-most-if-not-all-linux-distributions
[Blip.tv]: http://blip.tv
[CPAN]: http://www.perlmonks.org/?node_id=770042
[Chrome]: http://chrome.google.com
[Digital Ocean]: https://digitalocean.com/
[DropBox]: http://dropbox.com
[Git]: http://git-scm.org
[GitHub]: http://github.com
[GitHub Pages]: http://pages.github.com/
[Google+]: http://plus.google.com/
[GreenShot]: http://getgreenshot.org/
[Hootsuite]: http://hootsuite.com/
[InstaPaper]: http://instapaper.com/
[Internet Relay Chat]: http://en.wikipedia.org/wiki/Internet_Relay_Chat
[Jekyll]: http://jekyllrb.com
[KhanAcademy]: http://khanacademy.com
[Linode]: https://www.linode.com/
[Lynx]: http://lynx.browser.org/
[Moose]: http://blog.moose.perl.org/
[NeXT integration]: http://en.wikipedia.org/wiki/Darwin_(operating_system)
[Node.js]: http://nodejs.org
[Obama campaign]: http://kylerush.net/blog/meet-the-obama-campaigns-250-million-fundraising-platform/
[PLN]: http://en.wikipedia.org/wiki/Personal_learning_network
[Pinboard]: http://pinboard.in
[Putty]: http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
[Rackspace]: http://rackspace.com
[Screen]: https://www.gnu.org/software/screen/
[Show]: https://github.com/robmuh/bin/blob/master/show
[StackExchange]: http://stackexchange.com/
[Twitter]: http://twitter.com
[Vimeo]: http://vimeo.com
[Xchat]: http://xchat.org
[YouTube]: http://youtube.com
[bashrc]: http://github.com/robmuh/config.git
[books]: http://ianhocking.com/2013/06/22/writing-a-novel-using-markdown/
[bozos]: http://www.forbes.com/sites/ericjackson/2012/01/31/why-every-company-needs-a-no-bozo-policy/
[classes]: https://github.com/robmuh/perl-classes.git
[git save]: https://github.com/robmuh/bin/blob/master/save
[git-bash]: http://git-scm.org
[git-scm.org]: http://git-scm.org
[markdown]: https://help.github.com/articles/github-flavored-markdown
[npm]: https://npmjs.org/
[old world correspondence]: https://www.darwinproject.ac.uk/
[reasons]: http://www.wp101.com/blog/tutorials/10-reasons-why-you-should-never-host-your-own-videos/
[reexamined]: /blip-why/
[skilstak.io]: http://skilstak.io
[sublime]: http://www.sublimetext.com/
[vim]: http://www.vim.org/
[vimfiles]: https://github.com/robmuh/vimfiles.git
[writemonkey]: http://www.writemonkey.com
